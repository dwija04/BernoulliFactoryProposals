
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("sensor_network_functions.R")
> set.seed(1)
> # Observation indicators from the fifth sensor (1st column) to the first four sensors
> # and those from the sixth sensor (2nd column) to the first four sensors.
> Ob <- matrix(c(1, 0, 1, 0, 1, 0, 1, 0), ncol = 2)
> 
> 
> # Observation indicators among the first four sensors. 
> Os <- matrix(c(0, 0, 0, 1,
+                0, 0, 1, 1,
+                0, 1, 0, 0,
+                1, 1, 0, 0), ncol = 4)
> 
> 
> # Each row indicates the location of the known sensors (5th and 6th).
> Xb <- matrix(c(0.5, 0.3, 0.3, 0.7), ncol = 2)
> 
> 
> 
> # Each row indicates the location of the unknown sensors (1st, 2nd, 3rd, and 4th).
> Xs <- matrix(c(0.5748, 0.0991, 0.2578, 0.8546, 
+                0.9069, 0.3651, 0.1350, 0.0392), ncol = 2)
> 
> # The observed distances from the fifth sensor (1st column) to the first four sensors
> # and those from the sixth sensor (2nd column) to the first four sensors.
> Yb <- matrix(c(0.6103, 0, 0.2995, 0, 
+                0.3631, 0, 0.5656, 0), ncol = 2)
> # Observed distances among the first four sensors.
> Ys <- matrix(c(0, 0, 0, 0.9266,
+                0, 0, 0.2970, 0.8524,
+                0, 0.2970, 0, 0,
+                0.9266, 0.8524, 0, 0), ncol = 4)
> 
> loc <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8) #initial location
> 
> #Length of chain
> m <- 1e6
> scale <- 1.08
> bf_chain_single <- MHwG.RAM.bernoulli(initial.loc = loc, jump.scale = rep(scale, 4), Ob, Os, Xb, Xs, Yb, Ys, n.sample = m, n.burn = 0)
[1] 10000
[1] 20000
[1] 30000
[1] 40000
[1] 50000
[1] 60000
[1] 70000
[1] 80000
[1] 90000
[1] 100000
[1] 110000
[1] 120000
[1] 130000
[1] 140000
[1] 150000
[1] 160000
[1] 170000
[1] 180000
[1] 190000
[1] 200000
[1] 210000
[1] 220000
[1] 230000
[1] 240000
[1] 250000
[1] 260000
[1] 270000
[1] 280000
[1] 290000
[1] 300000
[1] 310000
[1] 320000
[1] 330000
[1] 340000
[1] 350000
[1] 360000
[1] 370000
[1] 380000
[1] 390000
[1] 400000
[1] 410000
[1] 420000
[1] 430000
[1] 440000
[1] 450000
[1] 460000
[1] 470000
[1] 480000
[1] 490000
[1] 500000
[1] 510000
[1] 520000
[1] 530000
[1] 540000
[1] 550000
[1] 560000
[1] 570000
[1] 580000
[1] 590000
[1] 600000
[1] 610000
[1] 620000
[1] 630000
[1] 640000
[1] 650000
[1] 660000
[1] 670000
[1] 680000
[1] 690000
[1] 700000
[1] 710000
[1] 720000
[1] 730000
[1] 740000
[1] 750000
[1] 760000
[1] 770000
[1] 780000
[1] 790000
[1] 800000
[1] 810000
[1] 820000
[1] 830000
[1] 840000
[1] 850000
[1] 860000
[1] 870000
[1] 880000
[1] 890000
[1] 900000
[1] 910000
[1] 920000
[1] 930000
[1] 940000
[1] 950000
[1] 960000
[1] 970000
[1] 980000
[1] 990000
[1] 1000000
> aux_chain_single <- MHwG.RAM.auxiliary(initial.loc = loc, initial.aux = loc, jump.scale = rep(scale, 4), Ob, Os, Xb, Xs, Yb, Ys, n.sample = m, n.burn = 0)
[1] 10000
[1] 20000
[1] 30000
[1] 40000
[1] 50000
[1] 60000
[1] 70000
[1] 80000
[1] 90000
[1] 100000
[1] 110000
[1] 120000
[1] 130000
[1] 140000
[1] 150000
[1] 160000
[1] 170000
[1] 180000
[1] 190000
[1] 200000
[1] 210000
[1] 220000
[1] 230000
[1] 240000
[1] 250000
[1] 260000
[1] 270000
[1] 280000
[1] 290000
[1] 300000
[1] 310000
[1] 320000
[1] 330000
[1] 340000
[1] 350000
[1] 360000
[1] 370000
[1] 380000
[1] 390000
[1] 400000
[1] 410000
[1] 420000
[1] 430000
[1] 440000
[1] 450000
[1] 460000
[1] 470000
[1] 480000
[1] 490000
[1] 500000
[1] 510000
[1] 520000
[1] 530000
[1] 540000
[1] 550000
[1] 560000
[1] 570000
[1] 580000
[1] 590000
[1] 600000
[1] 610000
[1] 620000
[1] 630000
[1] 640000
[1] 650000
[1] 660000
[1] 670000
[1] 680000
[1] 690000
[1] 700000
[1] 710000
[1] 720000
[1] 730000
[1] 740000
[1] 750000
[1] 760000
[1] 770000
[1] 780000
[1] 790000
[1] 800000
[1] 810000
[1] 820000
[1] 830000
[1] 840000
[1] 850000
[1] 860000
[1] 870000
[1] 880000
[1] 890000
[1] 900000
[1] 910000
[1] 920000
[1] 930000
[1] 940000
[1] 950000
[1] 960000
[1] 970000
[1] 980000
[1] 990000
[1] 1000000
> 
> save(bf_chain_single, aux_chain_single, file = "RAM-samples-single-run.RData")
> 
> 
> proc.time()
     user    system   elapsed 
28128.516     7.683 28137.766 
